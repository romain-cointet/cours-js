{
  "head": {
    "chapter": {
      "id": 0,
      "value": "Javascript"
    },
    "title": "Tableaux et objets",
    "resume": "C'est le moment o√π je te perds..."
  },
  "intro": {
    "left": [
      {
        "type": "h3",
        "value": "On commence √† rentrer dans le vif du sujet."
      },
      {
        "type": "h4",
        "value": "Maintenant qu'on sait utiliser les variables et la console, on va pouvoir rigoler un peu..."
      },
      {
        "type": "p",
        "value": "Allez courage, on en est qu'au d√©but !"
      }
    ],
    "right": [
      {
        "type": "img",
        "src": "0-3.gif",
        "alt": "Tableaux et objets"
      }
    ]
  },
  "content": [
    {
      "type": "h4",
      "value": "Les tableaux"
    },
    {
      "type": "h5",
      "value": "D√©clarer un tableau"
    },
    {
      "type": "p",
      "value": "Les variables de type String et Number c'est bien mais comment je fais si je veux stocker de multiples donn√©es, par exemple r√©cup√©rer la liste de tous les utilisateurs de mon site ? Je ne vais pas cr√©er une variable par utilisateur, √ßa serait impossible... C'est pour √ßa qu'il existe un autre type de variable: <b>les tableaux</b>. Un tableau (on appelle √ßa un <b>Array</b>), va permettre de stocker un nombre infini de donn√©es dans ma variable. Pour d√©clarer un tableau, il faut ins√©rer nos donn√©es √† l'int√©rieur de crochets <b>[</b> et <b>]</b>, et s√©parer ces donn√©es par des virgules:"
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "// Mon tableau se compose ici de trois valeurs de type String\nlet fruitsDeLhiver = ['pommes', 'poires', 'cl√©mentines'];\n\n// Mon tableau se compose de 4 valeurs de type Number\nlet notesTrimestre1 = [12, 16, 8, 11];"
    },
    {
      "type": "h5",
      "value": "Lire l'entr√©e d'un tableau"
    },
    {
      "type": "p",
      "value": "Avoir un tableau de donn√©es c'est bien, mais on aimerai pouvoir utiliser ces donn√©es non ? Il faut savoir que chaque entr√©e d'un tableau a un num√©ro. On appelle ce num√©ro un <b>index</b> et les indexs d'un tableau commencent √† 0 et non √† 1. C'est √† dire que pour r√©cup√©rer l'entr√©e num√©ro 1 de mon tableau je vais appeler l'index 0."
    },
    {
      "type": "img",
      "src": "brain-explode.gif",
      "alt": "1 = 0"
    },
    {
      "type": "p",
      "class": "mt-4",
      "value": "Pour la syntaxe, il suffit d'appeler notre tableau, de mettre des crochets et de lui ajouter l'index souhait√© √† l'int√©rieur des corchets:"
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "console.log( fruitsDeLhiver[0] ); // retourne la valeur 'pommes'\nconsole.log( fruitsDeLhiver[2] ); // retourne la valeur 'cl√©mentines'\nconsole.log( fruitsDeLhiver[3] ); // ERREUR: il n'y a que trois entr√©es dans mon tableau et comme les index commencent √† 0, la 3e entr√©e est √† l'index 2."
    },
    {
      "type": "h5",
      "value": "Ajouter une entr√©e √† un tableau"
    },
    {
      "type": "p",
      "value": "Biens√ªr, tout n'est pas fig√©. Notre tableau reste une variable, on peut donc le modifier ! Et pour ajouter un entr√©e √† notre tableau, il va falloir utiliser une <b>fonction</b> de Javascript... Tu comprendras plus tard ce qu'est une fonction. Pour l'instant on va juste en utiliser quelques unes... Pour ajouter une entr√©e dans un tableau, il faut utiliser la fonction <b>push()</b> et y ins√©rer notre valeur √† l'int√©rieur des parenth√®ses."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "// La fonction push() permet d'ajouter une entr√©e √† un tableau\nfruitsDeLhiver.push('oranges');\n\nconsole.log(fruitsDeLhiver); // retourne pommes, poires, cl√©mentines et oranges\n\n// On peut ajouter plusieurs entr√©es en m√™me temps\nfruitsDeLhiver.push('fruits rouges', 'pamplemousse');"
    },
    {
      "type": "h5",
      "value": "Supprimer une entr√©e √† un tableau"
    },
    {
      "type": "p",
      "value": "Comme pour l'ajout d'une entr√©e, on peut en supprimer. Il y a plusieurs m√©thodes pour supprimer une entr√©e: la m√©thode <b>pop()</b> permet de supprimer la derni√®re entr√©e du tableau, la m√©thode <b>shift()</b> supprimera la premi√®re entr√©e du tableau, et la m√©thode <b>splice()</b> supprimera l'entr√©e souhait√©e en indiquant son index et combien d'entr√©e seront supprim√©es avec elles."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "// Supprime la derniere entr√©e\nfruitsDeLhiver.pop(); // supprimera 'pamplemousse'\n\n// Supprime la premi√®re entr√©e\nfruitsDeLhiver.shift() // supprime 'pommes'\n\n// Je re affecte les valeurs par d√©faut sinon on va se perdre...\nfruitsDeLhiver = ['pommes', 'poires', 'cl√©mentines'];\n\n// Supprime l'entr√©e choisie\nfruitsDeLhiver.splice(1,0); // supprime 'poires' et pas d'autres entr√©es apr√®s elle"
    },
    {
      "type": "h5",
      "value": "Savoir le nombre d'entr√©es d'un tableau"
    },
    {
      "type": "p",
      "value": "Il peut √™tre int√©ressant aussi de conna√Ætre combien d'entr√©es a notre tableau... Pour le savoir, on va utiliser la propri√©t√© <b>length</b>. On verra plus tard ce qu'est une propri√©t√© üòÖ."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "fruitsDeLhiver = ['pommes', 'poires', 'cl√©mentines'];\n\n// Conna√Ætre le nombre d'entr√©es d'un tableau\nfruitsDeLhiver.length; // retourne 3"
    },
    {
      "type": "p",
      "value": "<span class='note'>NOTE</span> Il existe √©norm√©ment de fonctions et de propri√©t√©s pour manipuler les tableaux. Ca ne sert √† rien que je te les montre toutes, tu vas les oublier. Il vaut mieux pour toi que tu cherches sur Google quand tu en auras besoin. Un d√©veloppeur ne peut pas tout retenir, il doit s'aider de la documentation en ligne, c'est obligatoire !"
    },
    {
      "type": "h4",
      "value": "Les objets"
    },
    {
      "type": "h5",
      "value": "D√©clarer un objet"
    },
    {
      "type": "p",
      "value": "On peut dire que les objets sont un peu l'√©volution des tableaux. Comme les tableaux, ce sont un type de variable, le type <b>Object</b> et ils permettent de stocker un nombre illimit√© de valeurs mais la syntaxe est un peu diff√©rente."
    },
    {
      "type": "p",
      "value": "A la diff√©rence des tableaux, ils ne fonctionnent pas avec des indexs mais avec une paire de <b>cl√© / valeur</b>, la <b>cl√©</b> √©tant un nom que nous lui avons donn√©."
    },
    {
      "type": "p",
      "value": "<span class='note'>NOTE</span> Cette syntaxe est appel√©e le <b>JSON</b>, et elle fonctionne un peu comme le <b>DOM</b>, c'est √† dire en arborescence."
    },
    {
      "type": "p",
      "value": "Allez, je te montre:"
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "let user = {\n  firtName: 'Sarah',\n  lastName: 'Crauche',\n  infos: {\n    phone: '+33712345678',\n    address: '123 rue bidon',\n    city: 'Toulouse',\n    zipcode: 31000,\n    country: 'France'\n  }\n}"
    },
    {
      "type": "p",
      "value": "Donc l√†, concr√®tement, j'ai cr√©√© plusieurs cl√©s (firstName, lastName, infos, phone, etc...) et je leur ai attribu√© une valeur √† chacun. Et quand je parlais d'arborescence, on voit bien que phone, address, city, zipcode et country sont les enfants de infos."
    },
    {
      "type": "h5",
      "value": "Acc√©der aux attributs d'un objet"
    },
    {
      "type": "p",
      "value": "Alors maintenant, comment on y acc√®de ? Facile ! Je te disais tout √† l'heure que c'√©tait un syst√®me de cl√©/valeur, donc pas besoin de compter les indexs ici ! Il suffit d'appeler <b>sonObjet.saCl√©</b>."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "// R√©cup√©rer le pr√©nom\nconsole.log(user.firstName + ' ' + user.lastName); // retourne Sarah Croche\n\n// R√©cup√©rer la ville\nconsole.log(user.infos.city); // retourne Toulouse"
    },
    {
      "type": "h5",
      "value": "Modifier un attribut d'un objet"
    },
    {
      "type": "p",
      "value": "C'est aussi simple que d'acc√©der √† un attribut !"
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "// Modifier le nom de l'utilisateur\nuser.lastName = 'P√®le';\n\nconsole.log(user.firstName + ' ' + user.lastName); // retourne Sarah P√®le"
    },
    {
      "type": "p",
      "value": "Tu as tout compris ? Tr√®s bien ! Passons au cours suivant..."
    },
    {
      "type": "img",
      "src": "approve-boy.gif",
      "alt": "Les objets, c'est cool !"
    }
  ]
}