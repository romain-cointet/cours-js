{
  "head": {
    "chapter": {
      "id": 0,
      "value": "Javascript"
    },
    "title": "Le Javascript et le web partie 1: Parcourir le DOM",
    "resume": "On va faire autre chose que du console.log(); !"
  },
  "intro": {
    "left": [
      {
        "type": "h3",
        "value": "Le grand jour est enfin arriv√© !"
      },
      {
        "type": "h4",
        "value": "Tu vas avoir autre chose qu'une page blanche !"
      },
      {
        "type": "p",
        "value": "Mais c'est pas pour autant qu'on va abandonner la console ! Elle sera ta plus grande amie pour d√©boguer ton site !"
      }
    ],
    "right": [
      {
        "type": "img",
        "src": "unbelievable.gif",
        "alt": "Le Javascript et le web partie 1: Parcourir le DOM"
      }
    ]
  },
  "content": [
    {
      "type": "h4",
      "value": "Rappel de ce qu'est le DOM"
    },
    {
      "type": "p",
      "value": "Avant de commencer, petit rappel de ce qu'est le DOM pour se remettre dans le bain. Le <b>DOM</b> est l'interface qui repr√©sente le HTML de ta page web et qui te permettra d'acc√©der et de modifier tous les √©l√©ments de ta page gr√¢ce √† Javascript."
    },
    {
      "type": "img",
      "src": "ready.gif",
      "alt": "Rappel de ce qu'est le DOM"
    },
    {
      "type": "h4",
      "class": "mt-8",
      "value": "Acc√©der aux √©l√©ments du DOM par s√©lection"
    },
    {
      "type": "p",
      "value": "Pour d√©buter avec la manipulation du DOM, on va apprendre √† se d√©placer dans le DOM. Parce que c'est bien beau de vouloir √™tre d√©veloppeur.se mais il faut bien conna√Ætre son chemin avant de partir √† l'aventure..."
    },
    {
      "type": "p",
      "value": "On va d√©j√† partir avec cette base HTML. C'est pas grand chose, mais il faut bien commencer quelque part..."
    },
    {
      "type": "code",
      "language": "html",
      "fileName": "index.html",
      "value": "<!DOCTYPE html>\n<html>\n <head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Titre de ma page</title>\n </head>\n\n <body>\n  <h1>Hello JS !</h1>\n  <p class='text-content' id='main-paragraph'>Ceci est mon premier paragraphe</p>\n  <p class='text-content'>Ceci est un paragraphe</p>\n  <p class='text-content'>Ceci est un paragraphe</p>\n\n  <script type='text/javascript' src='app.js'></script>\n </body>\n</html>"
    },
    {
      "type": "h5",
      "value": "Le DOM c'est bien beau mais √ßa ressemble en quoi en vrai ?"
    },
    {
      "type": "p",
      "value": "Pour se d√©placer dans le DOM, on va utiliser l'objet <b>document</b> (c'est de D de DOM). Alors, allons-y, faisons un <b>console.log</b> de <b>document</b> üòÅ."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "console.log(document);"
    },
    {
      "type": "p",
      "value": "Alors, qu'est-ce que √ßa nous retourne ? Notre code HTML! Je te pr√©sente le DOM ! DOM, √©tudiant. √âtudiant, DOM. Tu es enchant√©, il est enchant√©, les pr√©sentations sont termin√©es, vous allez √™tre des supers potes, maintenant on avance !"
    },
    {
      "type": "h5",
      "value": "Cibler un √©l√©ment gr√¢ce √† son id"
    },
    {
      "type": "p",
      "value": "Reprenons notre code HTML. Admettons que je veuille r√©cup√©rer le paragraphe avec l'id <b>main-paragraph</b>. Je vais utiliser pour cela une <b>fonction</b> de l'objet <b>document</b> qui s'appelle <b>getElementById()</b> qui permet comme son nom l'indique de r√©cup√©rer un √©l√©ment du DOM par son <b>id</b>."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "let monParagraphePrincipal = document.getElementById('main-paragraph');\n\nconsole.log(monParagraphePrincipal);"
    },
    {
      "type": "p",
      "value": "La console affiche bien notre √©l√©ment HTML. (Tu peux tester plut√¥t que de lire simplement le cours...)"
    },
    {
      "type": "p",
      "value": "<span class='note'>NOTE</span> Je te rappelle qu'un <b>id</b> est unique ! Il ne peut pas y avoir deux √©l√©ments avec un id identique."
    },
    {
      "type": "h5",
      "value": "Cibler un ou plusieurs √©l√©ment gr√¢ce √† sa/leur classe"
    },
    {
      "type": "p",
      "value": "Tout comme on peut r√©cup√©rer un √©l√©ment gr√¢ce √† son <b>id</b>, on peut en r√©cup√©rer un ou plusieurs gr√¢ce aux <b>classes</b>. Je dis un ou plusieurs car contrairement √† un <b>id</b>, une classe peut √™tre utilis√©e sur plusieurs √©l√©ments du DOM. Et pour cela, on va utiliser la fonction du DOM qui s'appelle <b>getElementsByClassName()</b>."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "let mesParagraphes = document.getElementsByClassName('text-content');\n\nconsole.log(mesParagraphes);"
    },
    {
      "type": "p",
      "value": "Cette fois-ci, la console nous retourne un <b>HTMLCollection</b>. C'est quoi ? C'est un <b>tableau</b> ;) et le chiffre entre parenth√®se et son nombre d'√©l√©ments √† l'int√©rieur. Dans notre cas, ce sont les trois balises <b>p</b>. Et si on d√©plie chaque √©l√©ment du tableau on peut voir que ce sont des objets qui contiennent une tonne d'attributs que l'on pourra r√©cup√©rer. Exemple :"
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "// Affiche le contenu de mon √©l√©ment\nconsole.log( mesParagraphes[0].innerText ); // Soit 'Ceci est mon premier paragraphe'"
    },
    {
      "type": "h5",
      "value": "Cibler un ou plusieurs √©l√©ments gr√¢ce √† leur nom de balise"
    },
    {
      "type": "p",
      "value": "De la m√™me mani√®re que pour r√©cup√©rer des √©l√©ments par leur classe, on peut les r√©cup√©rer par leur nom de balise avec la fonction <b>getElementsByTagName()</b>."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "let mesParagraphes = document.getElementsByTagName('p');\n\nconsole.log(mesParagraphes);"
    },
    {
      "type": "p",
      "value": "La fonction nous retourne √©galement un tableau d'objets avec les m√™mes attributs que pour <b>getElementsByClassName</b>."
    },
    {
      "type": "h5",
      "value": "Cibler un √©l√©ment gr√¢ce √† son id, sa classe ou son nom de balise"
    },
    {
      "type": "p",
      "value": "Un peu diff√©rente de ces soeurs, cette fonction permet de r√©cup√©rer le premier √©l√©ment du DOM gr√¢ce √† sa classe, son id ou son nom de balise. Cette fonction est <b>querySelector()</b>."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "let p1 = document.querySelector('p');\nconsole.log(p1);\n\nlet p2 = document.querySelector('#main-paragraph');\nconsole.log(p2);\n\nlet p3 = document.querySelector('.text-content');\nconsole.log(p3);"
    },
    {
      "type": "p",
      "value": "Ces trois variables affichent la m√™me chose car <b>querySelector</b> ne r√©cup√®re que le premier √©l√©ment qu'il trouve dans la hierarchie du DOM."
    },
    {
      "type": "p",
      "value": "<span class='note'>NOTE</span> Fais attention si tu utilises cette fonction pour r√©cup√©rer un id ou une classe, il faudra mettre un # ou un . devant leur nom."
    },
    {
      "type": "h4",
      "value": "Acc√©der aux √©lements du DOM par h√©ritage"
    },
    {
      "type": "p",
      "value": "Tu sais maintenant r√©cup√©rer des √©l√©ments en les ciblant directement gr√¢ce √† l'objet <b>document</b>. Mais Javascript permet aussi de naviguer dans le DOM gr√¢ce aux √©l√©ments pr√©c√©dement cibl√©s."
    },
    {
      "type": "p",
      "value": "Pour chaque <b>√©l√©ment</b> cibl√©, on va pouvoir r√©cup√©r√© son parent, ses enfants, les √©l√©ments le pr√©c√©dant et les √©l√©ments lui succ√©dant. Comme on l'a vu plus haut, un √©l√©ment cibl√© est un objet et dispose d'√©norm√©ment d'attributs et de fonctions. On va prendre ce code HTML pour exemple qui pourrait √™tre un slider d'images:"
    },
    {
      "type": "code",
      "language": "html",
      "fileName": "index.html",
      "value": "<!DOCTYPE html>\n<html>\n <head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Titre de ma page</title>\n </head>\n\n <body>\n  <section class='slider'>\n    <button class='slider-previous'>Previous</button>\n\n    <div class='slider-container'>\n      <img src='img1.jpg' alt='' id='img1'/>\n      <img src='img2.jpg' alt='' id='img2'/>\n      <img src='img3.jpg' alt='' id='img3'/>\n    </div>\n\n    <button class='slider-next'>Next</button>\n  </section>\n\n  <script type='text/javascript' src='app.js'></script>\n </body>\n</html>"
    },
    {
      "type": "p",
      "value": "Je r√©cup√®re d'abord mon √©l√©ment, ici le div <b>slider-container</b>."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "let sliderContainer = document.getElementsByClassName('slider-container');"
    },
    {
      "type": "h5",
      "value": "R√©cup√©rer les enfant d'un √©l√©ment"
    },
    {
      "type": "p",
      "value": "Tu peux r√©cup√©rer les enfants d'un √©l√©ment cibl√© (dans notre cas, les images du slider) en utilisant l'attribut <b>children</b> de ton √©l√©ment."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "console.log( sliderContainer[0].children );"
    },
    {
      "type": "p",
      "value": "On r√©cup√®re bien les trois images enfants de notre √©l√©ment."
    },
    {
      "type": "h5",
      "value": "R√©cup√©rer le parent d'un √©l√©ment"
    },
    {
      "type": "p",
      "value": "Tout comme les enfants, tu peux r√©cup√©rer l'√©l√©ment parent de ton √©l√©ment cibl√© gr√¢ce √† <b>parentElement</b>."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "console.log( sliderContainer[0].parentElement );"
    },
    {
      "type": "p",
      "value": "On r√©cup√®re donc ici notre section qui comme classe <b>slider</b>."
    },
    {
      "type": "h5",
      "value": "R√©cup√©rer l'√©l√©ment pr√©c√©dent et l'√©l√©ment suivant notre √©l√©ment cibl√©"
    },
    {
      "type": "p",
      "value": "Et pour finir, on peut aussi r√©cup√©rer l'√©l√©ment suivant et l'√©l√©ment pr√©c√©dent du m√™me niveau hierarchique que notre √©l√©ment avec <b>nextElementSibling</b> et <b>previousElementSibling</b>."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "console.log( sliderContainer[0].nextElementSibling );\nconsole.log( sliderContainer[0].previousElementSibling );"
    },
    {
      "type": "p",
      "value": "Dans notre exemple, on r√©cup√®re les boutons <b>next</b> et <b>previous</b>."
    },
    {
      "type": "p",
      "value": "Bon c'√©tait plut√¥t simple √† comprendre tout √ßa apr√®s les fonctions et Git non ?"
    },
    {
      "type": "img",
      "src": "easy-peasy.gif",
      "alt": "Acc√©der aux √©l√©ments du DOM"
    },
    {
      "type": "h4",
      "class": "mt-8",
      "value": "Modifier le DOM"
    },
    {
      "type": "p",
      "value": "Et si on avait besoin de modifier ces √©l√©ments, comment qu'on ferait hein ?"
    },
    {
      "type": "h5",
      "value": "Modifier le contenu d'un √©l√©ment"
    },
    {
      "type": "p",
      "value": "Pour modifier le contenu d'un √©l√©ment, il y a deux attributs que l'on peut utiliser: <b>innerHTML</b> pour ajouter du contenu HTML et <b>textContent</b> pour ajouter du contenu textuel, le HTML ne sera pas pris en compte."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "let sliderPrevious = document.getElementsByClassName('slider-previous');\nsliderPrevious[0].innerHTML = '<img src=\"previous-btn.png\" alt=\"\"/>';\n\nlet sliderNext = document.getElementsByClassName('slider-next');\nsliderNext[0].textContent += ' image';"
    },
    {
      "type": "p",
      "value": "Dans cet exemple, on a remplac√© le texte du bouton Previous par une image, et ajout√© du texte au texte existant du bouton Next pour avoir <i>Next image</i> comme contenu textuel. Ce qui donne comme r√©sultat final :"
    },
    {
      "type": "code",
      "language": "html",
      "fileName": "index.html",
      "value": "<!DOCTYPE html>\n<html>\n <head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Titre de ma page</title>\n </head>\n\n <body>\n  <section class='slider'>\n    <button class='slider-previous'>\n      <img src=\"previous-btn.png\" alt=\"\" />\n    </button>\n\n    <div class='slider-container'>\n      <img src='img1.jpg' alt='' id='img1'/>\n      <img src='img2.jpg' alt='' id='img2'/>\n      <img src='img3.jpg' alt='' id='img3'/>\n    </div>\n\n    <button class='slider-next'>Next image</button>\n  </section>\n\n  <script type='text/javascript' src='app.js'></script>\n </body>\n</html>"
    },
    {
      "type": "h5",
      "value": "Modifier les classes CSS"
    },
    {
      "type": "p",
      "value": "Pour modifier les classes CSS d'un √©l√©ment, on va utiliser la propri√©t√© <b>classList</b> et cette propri√©t√© contient plusieurs fonctions dont les principales √† retenir sont :"
    },
    {
      "type": "ul",
      "value": "<li><b>add()</b> qui permet d'ajouter une ou plusieurs classes;</li><li><b>remove()</b> qui permet de supprimer une ou plusieurs classes;</li><li><b>contains()</b> qui permet de v√©rifier si la classe sp√©cifi√©e est pr√©sente ou pas;</li><li><b>replace()</b> qui permet de remplacer la classe actuelle par une nouvelle;</li>"
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "let img1 = document.getElementById('img1');\n\n// Ajouter une classe\nimg1.classList.add('is-active');\n\n// Remplacer un classe\nimg1.classList.replace('is-active', 'is-unactive');\n\n// Supprimer une classe\nimg1.classList.remove('is-unactive');\n\n// Verifier si une classe est pr√©sente\nimg1.classList.contains('is-active'); // Retourne false puisqu'on vient de la supprimer"
    },
    {
      "type": "h5",
      "value": "Modifier le style CSS d'un √©l√©ment"
    },
    {
      "type": "p",
      "value": "Plut√¥t que de modifier une classe CSS, on peut directement modifier le style CSS gr√¢ce √† la propri√©t√© <b>style</b> qui contient elle m√™me des attributs correspondants aux propri√©t√©s CSS, par exemple <b>backgroundColor</b> pour la propri√©t√© CSS <b>background-color</b>."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "let btnNext = document.getElementsByClassName('slider-next');\n\nbtnNext.style.color = '#FF0000';\nbtnNext.style.fontWeight = 'bold';"
    },
    {
      "type": "p",
      "value": "Je ne vais pas te lister toutes les propri√©t√©s CSS, j'en aurait pour l'ann√©e enti√®re..."
    },
    {
      "type": "h5",
      "value": "Modifier les attributs d'un √©l√©ment"
    },
    {
      "type": "p",
      "value": "On peut aussi modifier les attributs d'un √©l√©ments, par exemple l'attribut <b>href</b> d'un lien ou encore l'attribut <b>src</b> d'une image."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "let img1 = document.getElementById('img1');\n\n// R√©cup√©rer un attribut\nimg1.getAttribute('src'); // Retourne 'img1.jpg'\n\n// Changer la valeur d'un attribut\nimg1.setAttribute('src', 'img4.jpg');"
    },
    {
      "type": "h5",
      "value": "Cr√©er de nouveaux √©l√©ments et les ajouter dans le DOM"
    },
    {
      "type": "p",
      "value": "Tu peux √©galement cr√©er carr√©ment de nouveau √©l√©ments gr√¢ce √† la propri√©t√© <b>createElement</b> de l'objet <b>document</b>."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "let newImg = document.createElement('img');"
    },
    {
      "type": "p",
      "value": "<span class='note'>NOTE</span> Attention, cr√©er un √©l√©ment ne veut pas dire l'ins√©rer dans le DOM. Pour √ßa il va falloir l'ins√©rer √† l'endroit o√π l'on veut..."
    },
    {
      "type": "p",
      "value": "Maintenant qu'on a cr√©√© un √©l√©ment, il faut comme je l'ai dit au dessus l'ins√©rer dans le DOM √† l'endroit o√π l'on veut le voir appara√Ætre. Pour √ßa on vaa utiliser la fonction <b>appendChild</b>."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "let sliderContainer = document.getElementsByClassName('slider-container');\n\n// J'ajoute ma nouvelle image dans le div .slider-container\nsliderContainer[0].appendChild(newImg);"
    },
    {
      "type": "h5",
      "value": "Supprimer un √©lement"
    },
    {
      "type": "p",
      "value": "Tout comme l'ajout d'un nouvel √©l√©ment, je peux aussi en supprimer avec la fonction <b>removeChild</b>."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "let sliderContainer = document.getElementsByClassName('slider-container');\n\n// Je supprime mon image dans le div .slider-container\nsliderContainer[0].removeChild(newImg);"
    },
    {
      "type": "h5",
      "value": "Remplacer un √©l√©ment"
    },
    {
      "type": "p",
      "value": "Ou alors je peux remplacer un √©l√©ment plut√¥t que de le supprimer avec la fonction <b>replaceChild</b>."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "let slider = document.getElementsByClassName('slider');\nlet btnPrevious = document.getElementsByClassName('previous-btn');\n\nlet newBtnPrevious = document.createElement('a');\n\nslider.replaceChild(newBtnPrevious, btnPrevious);"
    },
    {
      "type": "p",
      "value": "C'est beaucoup d'informations mais il n'y a rien de m√©chant dans tout √ßa. Dans le prochain cours, on verra qu'on peut cr√©er des √©v√©nements avec Javascript pour donner un peu d'interraction..."
    },
    {
      "type": "img",
      "src": "tired.gif",
      "alt": "Ce cours est fini, va te coucher, il est tard !"
    }
  ]
}