{
  "head": {
    "chapter": {
      "id": 0,
      "value": "Javascript"
    },
    "title": "Syntaxe et bases de l'algorithmie",
    "resume": "√áa y est, on va coder... Pr√©parez vos dolipranes..."
  },
  "intro": {
    "left": [
      {
        "type": "h3",
        "value": "√Ä la fin de ce cours, "
      },
      {
        "type": "h4",
        "value": "tu seras enfin un d√©veloppeur web !"
      },
      {
        "type": "p",
        "value": "Du moins, un d√©butant... üòÖ"
      }
    ],
    "right": [
      {
        "type": "img",
        "src": "0-2.gif",
        "alt": "Syntaxe et bases de l'algorithmie"
      }
    ]
  },
  "content": [
    {
      "type": "h4",
      "value": "La base de la base"
    },
    {
      "type": "p",
      "value": "On va reprendre notre code de tout √† l'heure en changeant juste le chemin du fichier javascript. Tu vas donc cr√©er un dossier <b>cours-js</b> et √† l'int√©rieur y cr√©er un nouveau dossier <b>cours-0-2</b> (c'est par rapport √† la page du cours o√π tu te trouves: chapitre 0, cours 2)."
    },
    {
      "type": "p",
      "value": "√Ä pr√©sent, tu vas ouvrir ton √©diteur de code pr√©f√©r√©, on appelle √ßa un IDE (si tu n'en as pas, je te conseille Visual Code Studio) et y ouvrir ton dossier <b>cour-0-2</b>. Une fois cela fait, tu vas y cr√©er un nouveau fichier que tu appelleras <b>index.html</b> et tu y colleras le code ci dessous:"
    },
    {
      "type": "code",
      "language": "html",
      "fileName": "index.html",
      "value": "<!DOCTYPE html>\n<html>\n <head>\n  <title>Titre de ma page</title>\n </head>\n\n <body>\n   <script type='text/javascript' src='app.js'></script>\n </body>\n</html>"
    },
    {
      "type": "p",
      "value": "Toujours dans le m√™me dossier, tu vas cr√©er un nouveau fichier que tu appeleras <b>app.js</b> (ou le nom que tu lui as donn√© dans ton code HTML."
    },
    {
      "type": "p",
      "value": "<span class='note'>NOTE</span> Attention au chemin <b class='text-primary'>s</b>ou<b class='text-primary'>rc</b>e que tu as mis dans ton code html ! <b class='text-primary'>src='app.js'</b> veut dire que ton fichier javascript se trouve √† la racine de ton projet, soit dans <b>cours-0-2</b>. Tu peux tr√®s bien le ranger dans un dossier enfant appel√© par exemple <b>js</b> mais dans ton code html tu devras √©crire <b class='text-primary'>src='js/app.js'</b>.<br> Entiende ?"
    },
    {
      "type": "p",
      "value": "Muy bien, maintenant ouvrons le fichier <b>index.html</b> avec notre navigateur web (je te conseille fortement d'utiliser <b>Chrome</b> ou <b>Firefox</b> !) et regardons ce qu'il se passe... <br>Alors ? Qu'est-ce que √ßa affiche ? Rien üò±? T'inqui√®te, c'est normal, on a rien √©crit qui est cens√© afficher quelque chose üòÇ. √Ä pr√©sent, retournons dans notre fichier <b>app.js</b> et ajoutons cette ligne :"
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "console.log('Coucou !');"
    },
    {
      "type": "p",
      "value": "Recharge ta page sur ton navigateur... Toujours rien ! Fais un clic droit sur ta page et clique sur <b>Inspecter l'√©l√©ment</b>. L√†, une nouvelle fen√™tre s'affiche avec du HTML. Cliques sur l'onglet <b>Console</b>. Tadammmm ! Il y a √©crit <b>Coucou !</b> dans ta console, c'est pas beau √ßa ? Voil√† tu sais faire du Javascript. Je te souhaite bon courage dans ton parcours professionnel, on se recroisera peut-√™tre un jour..."
    },
    {
      "type": "p",
      "value": "Allez, c'est bon je plaisante... Je vais t'expliquer ce qu'est donc cette sorcellerie."
    },
    {
      "type": "p",
      "value": "La ligne que tu as √©crit dans ton fichier javascript s'appelle une instruction. Tu ordonnes √† ton navigateur d'effectuer cette ligne. En l'ocurence, l'instruction <b>console.log</b> permet d'afficher ce que l'on veut dans la console. C'est quoi la console ? C'est ce qu'il va te servir √† d√©bugguer ton site quand tout sera plant√© ! D'o√π l'importance de te la pr√©senter en premier !"
    },
    {
      "type": "h4",
      "value": "Instructions et commentaires"
    },
    {
      "type": "h5",
      "value": "Les instructions"
    },
    {
      "type": "p",
      "value": "Comme je viens de le dire, une instruction sert √† donner un ordre √† ton navigateur. Tu peux lui dire d'afficher quelque chose dans la console, ou lui dire de d√©clarer une variable, ou lui dire d'effectuer un calcul, ou encore lui dire d'appeler une fonction..."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "console.log('Coucou !');\nlet maVariable = 3;\nlet monResultat = maVariable + 10;\nconsole.log(maVariable, monResultat);"
    },
    {
      "type": "p",
      "value": "Recopie ce code dans ton fichier javascript et recharge la page de ton navigateur... <br>Qu'est-ce qu'il s'affiche dans la console ?"
    },
    {
      "type": "code",
      "language": "bash",
      "fileName": "console",
      "value": "Coucou !\n3, 13"
    },
    {
      "type": "p",
      "value": "Regardons un peu ce qu'il s'est pass√© mais sans rentrer dans les d√©tails: Nous avons ici 4 lignes de code dont 4 instructions :"
    },
    {
      "type": "ul",
      "value": "<li>Bon le Coucou, je vous l'ai d√©j√† expliqu√©.</li><li>La seconde ligne dit au navigateur qu'une variable qui s'appellera <b>maVariable</b> sera d√©clar√©e et aura pour valeur <b>3</b>.</li><li>La troisi√®me ligne d√©clare la variable <b>monResultat</b> et lui donnera pour valeur <b>3 + 10</b>.</li><li>Et la quatri√®me ligne affichera dans ma console les valeurs de mes variables <b>maVariable</b> et <b>monResultat</b>.</li>"
    },
    {
      "type": "p",
      "value": "On verra un peu plus tard ce qu'est une variable mais pour le moment, contente toi juste de comprendre qu'une instruction donne un ordre au navigateur."
    },
    {
      "type": "p",
      "value": "<span class='note'>NOTE</span> Dans les anciennes versions de Javascript, on devait terminer chaque instruction par un point virgule<b>;</b>. Aujourd'hui il n'est plus obligatoire de le mettre donc ne vous √©tonnez pas de voir du code avec des points virgules et d'autre sans point virgule."
    },
    {
      "type": "h5",
      "value": "Les commentaires"
    },
    {
      "type": "p",
      "value": "A la diff√©rence d'une instruction, un commentaire ne donne aucun ordre au navigateur. A quoi sert-il alors ? A vous y retrouver dans votre code ! Quand vous arriverez √† votre 200<sup>√®me</sup> ligne de code, vous serez bien content de lire un commentaire qui explique ce que fait la ligne d'en dessous !"
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "// Affiche 'Coucou !' dans la console\nconsole.log('Coucou !');\n\n// D√©clare une variable qui s'appelle maVariable et qui est √©gale √† 3\nlet maVariable = 3;\n\n/* D√©clare la variable monResultat\nqui est √©gale √† maVariable (donc 3) plus 10 */\nlet monResultat = maVariable + 10;\n\n//Affiche dans la console les valeurs de maVariable et de monResultat\nconsole.log(maVariable, monResultat);"
    },
    {
      "type": "p",
      "value": "On remarque qu'il y a deux types de commentaires:"
    },
    {
      "type": "ul",
      "value": "<li>Les commentaires en une seule ligne. Ils commencent par <b>//</b>.</li><li>Les commentaires multilignes. Ils commencent par <b>/*</b>, peuvent faire autant de lignes que tu veux et se terminent par <b>*/</b>."
    },
    {
      "type": "p",
      "value": "<span class='note'>NOTE</span> Tu peux aussi commenter des lignes de tes instructions pour qu'elles ne soient pas prises en compte par le navigateur. On s'en sert souvent quand on d√©bugge notre code."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "/*\nconsole.log('Coucou !');\nlet maVariable = 3;\n*/\nlet monResultat = maVariable + 10;\n// console.log(maVariable, monResultat);"
    },
    {
      "type": "p",
      "value": "Ici, seule la d√©claration de la <b>variable monResultat</b> sera prise en compte mais tu auras une <b class='text-primary'>erreur</b> dans ta console... Et oui, tu demandes √† ton navigateur d'additionner 10 avec la variable <b>maVariable</b> mais celle-ci n'existe plus puisque nous l'avons comment√©. Donc attention √† ne pas commenter n'importe quoi !"
    },
    {
      "type": "h4",
      "value": "Les variables"
    },
    {
      "type": "h5",
      "value": "Qu'est-ce qu'une variable et comment la d√©clarer ?"
    },
    {
      "type": "p",
      "value": "Il faut imaginer une variable comme un container, une bo√Æte. Et cette bo√Æte, peut contenir n'importe quoi. On pourra y mettre √† l'int√©rieur du texte, des chiffres, des tableaux de valeurs et tout autre chose."
    },
    {
      "type": "p",
      "value": "Pour d√©clarer une variable, on l'a vu un peu plus haut, il faut d'abord utiliser le mot <b>let</b> et ensuite lui donner un nom."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "let fruit;"
    },
    {
      "type": "p",
      "value": "Ce n'est pas plus compliqu√© que √ßa, ma variable <b>fruit</b> est d√©clar√©e. Elle n'a pour l'instant aucune valeur mais tu peux tenter un <b>console.log</b> dessus et regarder ce qu'il en ressort..."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "console.log(fruit)"
    },
    {
      "type": "code",
      "language": "bash",
      "fileName": "console",
      "value": "undefined"
    },
    {
      "type": "p",
      "value": "C'est bien ce qu'on disait, la variable <b>fruit</b> n'a pas de valeur."
    },
    {
      "type": "h5",
      "value": "Assigner une valeur √† une variable"
    },
    {
      "type": "p",
      "value": "√Ä pr√©sent qu'on a d√©clar√© notre variable, il va falloir lui affecter une valeur sinon elle ne va pas servir √† grand chose. Pour cel√† il suffit de l'appeler et de lui donner sa valeur gr√¢ce √† un <b>=</b>."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "//Je d√©clare ma variable\nlet fruit;\n\n//Je lui attribue une valeur\nfruit = 'banane';"
    },
    {
      "type": "p",
      "value": "<span class='note'>NOTE</span> Tu peux directement assigner une valeur √† ta variable au moment de sa d√©claration !"
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "//Je d√©clare ma variable et lui assigne une valeur\nlet fruit = 'banane';"
    },
    {
      "type": "p",
      "value": "Si √† pr√©sent tu fais un console log de ta variable tu verras que la console retourne bien une valeur d√©finit:"
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "let fruit = 'banane';\nconsole.log(fruit);"
    },
    {
      "type": "code",
      "language": "bash",
      "fileName": "console",
      "value": "banane"
    },
    {
      "type": "h5",
      "class": "mt-8",
      "value": "Convention de nommage"
    },
    {
      "type": "p",
      "value": "Je profite de ce chapitre pour vous parler des conventions de nommage des variables. Ce sont en quelque sorte des r√®gles d'√©criture pour faciliter la lisibilit√© du code entre d√©veloppeurs. En Javascript, pour d√©clarer des variables, on a tendance √† utiliser la convention de nommage appel√©e le <b class='text-primary'>Camel Case</b>. Le Camel Case s'√©crit en attachant tous les mots et chaque mot commence par une majuscule √† l'exception du premier (comme les hashtags sur Twitter):"
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "let fruit;\nlet sommeDeMesNotes;\nlet monResultat;"
    },
    {
      "type": "p",
      "value": "<span class='note'>NOTE</span> J'ai oubli√© de te dire: quand tu d√©clares une variables, ne lui mets pas d'accents ou de caract√®res sp√©ciaux... <b class='text-primary'>& $ ^ √© √® ! √π √†...</b> Surtout que certains vont servir √† coder !"
    },
    {
      "type": "p",
      "value": "En HTML et CSS, on aura tendance √† utiliser la convention de nommage appel√©e le <b class='text-primary'>Kebab Case</b> qui consiste √† tout √©crire en minuscule et √† s√©parer les mots par des tirets (et pas des underscores, √ßa c'est encore une autre convention...):"
    },
    {
      "type": "code",
      "language": "html",
      "fileName": "index.html",
      "value": "<h2 class='text-red'>Mon sous titre rouge</h2>"
    },
    {
      "type": "code",
      "language": "css",
      "fileName": "style.css",
      "value": ".text-red { color: #FF0000; }"
    },
    {
      "type": "h5",
      "value": "Les types de variables"
    },
    {
      "type": "p",
      "value": "Une variable peut √™tre de diff√©rents types selon la valeur qu'on lui attribut:"
    },
    {
      "type": "ul",
      "value": "<li><b>De type Number</b>: en lui affectant une valeur num√©rique</li><li><b>De type Boolean:</b> en lui affectant une valeur binaire (<b>true</b> ou <b>false</b>)</li><li><b>de type String:</b> en lui affectant une cha√Æne de caract√®res</li>"
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "// Variables de type Number\nlet annee = 2020;\nlet coefficient = 0.3;\n\n// Variables de type Boolean\nlet alive = true;\nlet isJumping = false;\n\n// Variables de type String\nlet nom = 'Jean Dupont';\nlet birthday = '20/09/1989';"
    },
    {
      "type": "p",
      "value": "<span class='spoil'>SPOIL</span> On verra dans les cours suivant qu'il y a d'autres types de variables. üòâ"
    },
    {
      "type": "h5",
      "value": "Modifier une variable"
    },
    {
      "type": "p",
      "value": "Bien √©videmment en programmation, nos variables ne vont pas toujours avoir la m√™me valeur √† travers toute notre application. Imaginons un site avec des comptes utilisateurs, il y aura s√ªrement une variable pour signifier au site que l'utilisateur est connect√© ou pas:"
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "// L'utilisateur arrive sur le site mais n'est pas connect√©\nlet loggedUser = false;"
    },
    {
      "type": "p",
      "value": "Et arrive le moment o√π l'utilisateur se connecte en rentrant son email, son mot de passe et en cliquant sur le bouton de connexion..."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "// Envoie des infos utilisateur √† la base de donn√©es...\n// Utilisateur trouv√© !\nloggedUser = true;"
    },
    {
      "type": "p",
      "value": "Comme on vient de le voir, pour modifier la valeur d'une variable, il suffit simplement de la rappeler et de lui assigner une nouvelle valeur."
    },
    {
      "type": "h4",
      "value": "Les op√©rateurs"
    },
    {
      "type": "p",
      "value": "Si on veut modifier la valeur d'une variable, on va √©galement pouvoir utiliser des op√©rateurs arithm√©tiques... N'aie pas peur, on va faire des maths niveau CP."
    },
    {
      "type": "h5",
      "value": "Additions et soustractions"
    },
    {
      "type": "p",
      "value": "Je te l'ai dit, on ne va pas partir dans des matrices et des primitives ! (M√™me si c'est possible d'en faire...) Aller, pas besoin de tergiverser, en plus on a d√©j√† vu les additions; place au code !"
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "let a = 3;\nlet b = 2;\nlet c = 0;\n\n// Addition\nlet somme = a + b; // correspond √† 3 +2\n\n// Soustraction\nlet difference = a - b; // correspond √† 3 - 2\n\n// Addition\na += b; // correspond √† 3 + 2\n\n// Soustraction\nb -= a; // correspond √† 2 - 3 \n\n// Incr√©mentation\nc++; // ajoute +1 donc la variable c est √©gale √† 1\n\n// D√©cr√©mentation\nc--; // enl√®ve -1 donc la variable c est √©gale √† 0\n\n// Suprise...\nlet d = '2';\nlet suprise = a + d; // Alors √ßa fait quoi √ßa ?? üòä\nconsole.log(suprise);"
    },
    {
      "type": "p",
      "value": "<span class='spoil'>SPOIL</span> Ca retourne une cha√Æne de caract√®re avec pour valeur <b>'32'</b>. Mais pourquoi ? Car la variable <b>d</b> n'est pas de type <b>Number</b> mais de type <b>String</b>. C'est une cha√Æne de caract√®res. Et par d√©faut Javascript ne peut pas additionner un Number et un String. Par cons√©quent, il va comprendre que le <b>+</b> est utilis√© pour concat√©ner cette chaine de caract√®res. Il va donc simplement assembler le 3 et le 2 pour faire 32."
    },
    {
      "type": "p",
      "value": "On peut donc utiliser l'op√©rateur <b>+</b> pour concat√©ner des cha√Ænes de caract√®res."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "let hello = 'Bonjour ';\nlet nom = 'Josie';\nlet phrase = hello + nom; // Retourne 'Bonjour Josie'"
    },
    {
      "type": "h5",
      "value": "Multiplications et divisions"
    },
    {
      "type": "p",
      "value": "Tout comme les additions et les soustractions, on peut effectuer des multiplications et des divisions sur nos variables."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "let a = 3;\nlet b = 2;\n\n// Multiplication\nlet resultat1 = a * b; // correspond √† 3 * 2\n\n// Division\nlet resultat2 = a / b; // correspond √† 3 / 2\n\n// Multiplication\na *= b; // correspond √† 3 * 2\n\n// Division\na /= b; // correspond √† 3 / 2"
    },
    {
      "type": "h4",
      "value": "Les constantes"
    },
    {
      "type": "p",
      "value": "Comme son nom l'indique, <b>une constante</b> est quelque chose qui va avoir une valeure constante, c'est √† dire que sa valeur ne changera jamais √† l'inverse des variables. La logique d'une constante est la m√™me que celle d'une variable √† la diff√©rence o√π on ne pourra pas lui re affecter une nouvelle valeur, une fois sa valeur d√©finit par d√©faut. Pour d√©clarer une constante, on ne va pas utiliser <b>let</b> mais <b>const</b> tout simplement. Exemple de constantes: l'adresse url de la base de donn√©es, la date de naissance d'un utilisateur, etc... Ces valeurs ne sont pas amen√©es √† changer donc nous les mettrons dans des constantes."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "const dataBasePath = 'facebook.mysql.ovh.net';\n\ndataBasePath = 'twitter.mysql.ovh.net' // ERREUR: on ne peut pas modifier une constante"
    }
  ]
}