{
  "head": {
    "chapter": {
      "id": 0,
      "value": "Javascript"
    },
    "title": "Le Javascript et le web partie 2: Les √©v√©nements",
    "resume": "Prochaine event, ce soir √† 21h, lieu tenu secret jusqu'au dernier moment. üòá"
  },
  "intro": {
    "left": [
      {
        "type": "h3",
        "value": "Euh, quand j'ai cliqu√© sur cette image..."
      },
      {
        "type": "h4",
        "value": "... Y a plein d'autres images douteuses qui sont apparues."
      },
      {
        "type": "p",
        "value": "Ah, tu as √©t√© victime... D'UN √âV√âNEMENT JAVASCRIPT !!"
      }
    ],
    "right": [
      {
        "type": "img",
        "src": "dramatic-chipmunk.gif",
        "alt": "Le Javascript et le web partie 2: Les √©v√©nements"
      }
    ]
  },
  "content": [
    {
      "type": "p",
      "value": "En Javascript, un <b>√©v√©nement</b> est ce qu'il ce passe apr√®s une action r√©alis√©e par un utilisateur. Par exemple: ce qu'il va se passer apr√®s qu'un utilisateur ai cliqu√© sur une image."
    },
    {
      "type": "h4",
      "value": "Structure d'un √©v√©nement"
    },
    {
      "type": "p",
      "value": "Un √©v√©nement se compose de deux parties: <b>son nom</b> et d'une fonction que l'on appellera <b>callback</b>. C'est dans le callback qu'on effectuera les actions que l'on veut effectuer lors de l'√©v√©nement."
    },
    {
      "type": "p",
      "value": "Reprenons notre exemple de slider. Je vais ajouter un √©v√©nement au clic sur le bouton Next pour changer l'image active de mon slider."
    },
    {
      "type": "p",
      "value": "<span class='note'>NOTE</span> On peut imaginer qu'en CSS, mon image active soit en <b>display: block;</b> et les autre en <b>display: none;</b>."
    },
    {
      "type": "code",
      "language": "html",
      "fileName": "index.html",
      "value": "<!DOCTYPE html>\n<html>\n <head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Titre de ma page</title>\n </head>\n\n <body>\n  <section class='slider'>\n    <button class='slider-previous'>Previous</button>\n\n    <div class='slider-container'>\n      <img src='0.jpg' alt='' class='slider-img is-active'/>\n      <img src='1.jpg' alt='' class='slider-img'/>\n      <img src='2.jpg' alt='' class='slider-img'/>\n    </div>\n\n    <button class='slider-next'>Next</button>\n  </section>\n\n  <script type='text/javascript' src='app.js'></script>\n </body>\n</html>"
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "// Je r√©cup√®re mes images dans un tableau\nlet imgs = document.getElementsByClassName('slider-img');\n// Je r√©cup√®re mon bouton Next\nlet btnNext = document.getElementsByClassName('slider-next');\n// J'initialise une variable qui sera l'index de mon tableau d'images\nlet imgActive = 0;"
    },
    {
      "type": "p",
      "value": "Voil√† ma base pour commencer √† travailler. Jusqu'ici, on a d√©j√† vu tout le code ci-dessus."
    },
    {
      "type": "p",
      "value": "√Ä pr√©sent regardons comment on va appeler notre √©v√©nement... Il faudra appeler la fonction <b>addEventListener</b> sur l'√©l√©ment auquel on veut associer l'√©v√©nement; dans notre cas le bouton Next. La fonction <b>addEventListener</b> comprends deux param√®tres : le <b>nom de l'√©v√©nement</b> et la <b>fonction callback</b>."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "btnNext[0].addEventListener('click', function() {\n  // Je suis dans la fonction callback\n  // C'est ici que je mettrai le code qui s'effectuera lorsque mon √©v√©n√©ment se lancera\n})"
    },
    {
      "type": "p",
      "value": "D√©taillons un peu ce qu'on a √©crit plus haut... Le <b>'click'</b> est le nom de l'√©v√©nement. Il y en a des tas (comme d√©tecter le mouvement de la souris, d√©tecter les entr√©es clavier, d√©tecter l'envoi d'un formulaire, etc...), je te laisserai le soin d'aller les regarder de plus pr√®s en cherchant la documentation officielle. Et ensuite, il y a la <b>fonction callback</b>. Oui tu ne r√™ves pas, j'ai √©crit une fonction dans les param√®tres d'une autre fonction. Et c'est dans cette fonction qu'on √©crira le reste du code qui s'effectuera quand l'√©v√©nement se lancera; dans notre cas, au clic sur le bouton."
    },
    {
      "type": "p",
      "value": "Allez, il ne reste plus qu'√† coder le changement d'image lors du clic..."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "btnNext[0].addEventListener('click', function() {\n  // Mon if sert √† ne pas continuer quand on arrive √† la derni√®re image\n  if( imgActive < (imgs.length - 1)) {\n    // Je supprime la classe active de l'image active\n    imgs[imgActive].classList.remove('is-active');\n    // J'incr√©mente mon index\n    imgActive++;\n    // Je rajoute la classe active √† l'image suivante\n    imgs[imgActive].classList.add('is-active');\n  }\n})"
    },
    {
      "type": "p",
      "value": "En supprimant la classe <b>is-active</b> de mon image, je lui redonne la propri√©t√© CSS <b>display: none;</b> ce qui aura pour effet de la masquer. Puis j'incr√©mente mon index pour pouvoir r√©cup√©rer l'image suivante de mon tableau. Et il ne me reste plus qu'√† lui ajouter la classe <b>is-active</b> pour passer l'image en <b>display: block</b>. C'√©tait pas si compliqu√© que √ßa non ? Allez, tu peux faire la m√™me chose pour le bouton <b>Previous</b>. Il y aura juste une petite diff√©rence, je te laisse la trouver..."
    },
    {
      "type": "p",
      "value": "<span class='spoil'>SPOIL</span> Correction: cette fois-ci on va ajouter un √©v√©nement au bouton Previous et le code √† l'int√©rieur du callback sera le m√™me √† l'exception que ma condition testera si <b>imgActive</b> est sup√©rieure √† 0, et qu'on d√©cr√©mentera au lien d'incr√©menter <b>imgActive</b>"
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "// Je r√©cup√®re mon bouton Previous\nlet btnPrevious = document.getElementsByClassName('slider-previous');\n\nbtnPrevious[0].addEventListener('click', function() {\n  // Mon if sert √† ne pas continuer quand on arrive √† la premi√®re image\n  if( imgActive > 0) {\n    // Je supprime la classe active de l'image active\n    imgs[imgActive].classList.remove('is-active');\n    // Je d√©cr√©mente mon index\n    imgActive--;\n    // Je rajoute la classe active √† l'image pr√©c√©dente\n    imgs[imgActive].classList.add('is-active');\n  }\n})"
    },
    {
      "type": "h4",
      "value": "L'objet event de la fonction callback"
    },
    {
      "type": "p",
      "value": "Je ne t'ai pas tout dit sur la fonction callback. Elle met √† disposition un objet <b>event</b> qui donne des propri√©t√©s et des fonctions suppl√©mentaires pour g√©rer ses √©v√©nements. Pour r√©cup√©rer cette propri√©t√©, il faut l'appeler dans les <b>param√®tres</b> de la fonction callback."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "monElement.addEventListener('click', function(event) { ... })"
    },
    {
      "type": "p",
      "value": "Cet objet <b>event</b> donne acc√®s √† de nombreuses fonctionnalit√©s mais on ne va s'attarder que sur deux de celles-ci: "
    },
    {
      "type": "h5",
      "value": "Ne pas ex√©cuter le comportement d'un √©l√©ment"
    },
    {
      "type": "p",
      "value": "La fonction <b>preventDefault()</b> permet de ne pas ex√©cuter le comportement normal d'un √©l√©ment. Par exemple si je veux mettre un √©v√©nement sur un lien, je devrait appeler cette fonction pour que le lien ne redirige pas automatiquement sur une autre page."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "monLien.addEventListener('click', function(event) {\n  event.preventDefault(); // Annule la redirection\n  // Je peux maintenant lui faire faire ce que je veux\n})"
    },
    {
      "type": "h5",
      "value": "Emp√™cher la propagation de l'√©v√©nement √† l'√©l√©ment parent"
    },
    {
      "type": "p",
      "value": "La fonction <b>stopPropagation()</b> permet de ne pas de ne pas propager l'√©v√©nement √† l'√©l√©ment parent de celui que nous utilisons. Cela est utile quand on veut utiliser le parent pendant que l'√©v√©nement est en cours."
    },
    {
      "type": "code",
      "language": "javascript",
      "fileName": "app.js",
      "value": "monElement.addEventListener('click', function(event) {\n  event.stopPropagation(); // Annule la propagation au parent\n  elementParent.innerHTML = '<p>Hello</p>';\n})"
    },
    {
      "type": "p",
      "value": "Ces deux fonctions sont des cas sp√©ciaux qui s'utilisent seulement dans certains cas. Retiens juste qu'ils existent, tu en auras s√ªrement un jour besoin."
    },
    {
      "type": "p",
      "value": "On ne va pas aller plus loin dans les √©v√©nements. Tu as maintenant les bases, je te laisserai le soin d'approfondir le sujet si tu en as envi. On a termin√© le premier chapitre ! Tu peux √™tre fier de toi ! Dans le prochain, on verra qu'on a pas besoin de tout recoder √† chaque fois et qu'il y a plein de choses d√©j√† faites et pr√™tes √† √™tre utilis√©es."
    },
    {
      "type": "nuxt-link",
      "src": "/1/0",
      "value": "On passe au chapitre 2 ?"
    }
  ]
}